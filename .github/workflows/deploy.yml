name: Deploy App

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set deploy target
        id: set-env
        run: |
          echo "GITHUB_REF: ${GITHUB_REF}"

          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "env=homolog" >> "$GITHUB_OUTPUT"
            echo "dir=/var/www/app/homolog" >> "$GITHUB_OUTPUT"
            echo "pm2_name=${{ secrets.PM2_BACK_HOMO }}" >> "$GITHUB_OUTPUT"
            echo "Configured for HOMOLOG deployment"
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "env=prod" >> "$GITHUB_OUTPUT"
            echo "dir=/var/www/app/prod" >> "$GITHUB_OUTPUT"
            echo "pm2_name=${{ secrets.PM2_BACK_PROD }}" >> "$GITHUB_OUTPUT"
            echo "Configured for PROD deployment"
          else
            echo "ERROR: No deployment target configured for ref: ${GITHUB_REF}"
            exit 1
          fi

      - name: Verify deployment variables
        run: |
          echo "Environment: ${{ steps.set-env.outputs.env }}"
          echo "Directory: ${{ steps.set-env.outputs.dir }}"
          echo "PM2 name: ${{ steps.set-env.outputs.pm2_name }}"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo "SSH connection successful"' || {
            echo "SSH connection failed with exit code $?"
            exit 1
          }

      - name: Prepare remote directories
        run: |
          echo "Preparing remote directories..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF' || {
            echo "Remote directory preparation failed with exit code $?"
            exit 1
          }
            set -e

            echo "Deploying to ${{ steps.set-env.outputs.env }}"

            # Verificar se as variáveis estão definidas
            if [ -z "${{ steps.set-env.outputs.dir }}" ]; then
              echo "ERROR: Target directory not set!"
              exit 1
            fi

            echo "Target directory: ${{ steps.set-env.outputs.dir }}"

            # Preparar pastas
            echo "Removing old directories..."
            rm -rf ${{ steps.set-env.outputs.dir }}/frontend
            rm -rf ${{ steps.set-env.outputs.dir }}/backend

            echo "Creating target directory..."
            mkdir -p ${{ steps.set-env.outputs.dir }}

            # Criar pastas temporárias para build
            echo "Creating temporary build directories..."
            cd /tmp
            rm -rf build-frontend build-backend
            mkdir build-frontend build-backend

            echo "Remote directories prepared successfully"
          EOF

      - name: Build frontend
        run: |
          echo "Building frontend..."
          if [ ! -d "frontend" ]; then
            echo "ERROR: frontend directory not found!"
            exit 1
          fi

          cd frontend
          echo "Installing frontend dependencies..."
          npm ci || {
            echo "Frontend npm ci failed with exit code $?"
            exit 1
          }

          echo "Building frontend..."
          npm run build || {
            echo "Frontend build failed with exit code $?"
            exit 1
          }

          echo "Creating frontend archive..."
          tar -czf ../frontend.tar.gz dist
          echo "Frontend build completed successfully"

      - name: Build backend
        run: |
          echo "Building backend..."
          if [ ! -d "backend" ]; then
            echo "ERROR: backend directory not found!"
            exit 1
          fi

          cd backend
          echo "Installing backend dependencies..."
          npm ci || {
            echo "Backend npm ci failed with exit code $?"
            exit 1
          }

          echo "Building backend..."
          npm run build || {
            echo "Backend build failed with exit code $?"
            exit 1
          }

          echo "Creating backend archive..."
          tar -czf ../backend.tar.gz dist package.json package-lock.json ecosystem.config.js
          echo "Backend build completed successfully"

      - name: Upload files via SCP
        run: |
          echo "Uploading frontend.tar.gz..."
          scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no frontend.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/frontend.tar.gz

          echo "Uploading backend.tar.gz..."
          scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no backend.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/backend.tar.gz

          echo "Files uploaded successfully"

      - name: Deploy and restart services
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            echo "Starting deployment process..."
            cd /tmp

            # Verificar se os arquivos foram enviados
            if [ ! -f frontend.tar.gz ] || [ ! -f backend.tar.gz ]; then
              echo "ERROR: Upload files not found!"
              exit 1
            fi

            # Extrair frontend
            echo "Extracting frontend..."
            tar -xzf frontend.tar.gz -C build-frontend
            mv build-frontend/dist ${{ steps.set-env.outputs.dir }}/frontend

            # Extrair backend
            echo "Extracting backend..."
            tar -xzf backend.tar.gz -C build-backend
            mkdir -p ${{ steps.set-env.outputs.dir }}/backend
            mv build-backend/dist ${{ steps.set-env.outputs.dir }}/backend/dist
            cp build-backend/package*.json build-backend/ecosystem.config.js ${{ steps.set-env.outputs.dir }}/backend/

            # Instalar dependências
            echo "Installing backend dependencies..."
            cd ${{ steps.set-env.outputs.dir }}/backend
            npm ci --omit=dev

            # Restart PM2
            echo "Restarting PM2 process: ${{ steps.set-env.outputs.pm2_name }}"
            pm2 reload ${{ steps.set-env.outputs.pm2_name }} || pm2 start ${{ steps.set-env.outputs.pm2_name }}

            # Reload nginx
            echo "Reloading nginx..."
            sudo systemctl reload nginx || echo "Warning: nginx reload failed"

            # Cleanup
            echo "Cleaning up temporary files..."
            rm -rf /tmp/build-frontend /tmp/build-backend /tmp/frontend.tar.gz /tmp/backend.tar.gz

            echo "Deployment completed successfully!"
          EOF